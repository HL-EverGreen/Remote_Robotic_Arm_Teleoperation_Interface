;; Auto-generated. Do not edit!


(when (boundp 'rail_agile_grasp_msgs::FindGraspsGoal)
  (if (not (find-package "RAIL_AGILE_GRASP_MSGS"))
    (make-package "RAIL_AGILE_GRASP_MSGS"))
  (shadow 'FindGraspsGoal (find-package "RAIL_AGILE_GRASP_MSGS")))
(unless (find-package "RAIL_AGILE_GRASP_MSGS::FINDGRASPSGOAL")
  (make-package "RAIL_AGILE_GRASP_MSGS::FINDGRASPSGOAL"))

(in-package "ROS")
;;//! \htmlinclude FindGraspsGoal.msg.html


(defclass rail_agile_grasp_msgs::FindGraspsGoal
  :super ros::object
  :slots (_workspace _useClassifier ))

(defmethod rail_agile_grasp_msgs::FindGraspsGoal
  (:init
   (&key
    ((:workspace __workspace) (instance rail_agile_grasp_msgs::Workspace :init))
    ((:useClassifier __useClassifier) nil)
    )
   (send-super :init)
   (setq _workspace __workspace)
   (setq _useClassifier __useClassifier)
   self)
  (:workspace
   (&rest __workspace)
   (if (keywordp (car __workspace))
       (send* _workspace __workspace)
     (progn
       (if __workspace (setq _workspace (car __workspace)))
       _workspace)))
  (:useClassifier
   (&optional __useClassifier)
   (if __useClassifier (setq _useClassifier __useClassifier)) _useClassifier)
  (:serialization-length
   ()
   (+
    ;; rail_agile_grasp_msgs/Workspace _workspace
    (send _workspace :serialization-length)
    ;; bool _useClassifier
    1
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; rail_agile_grasp_msgs/Workspace _workspace
       (send _workspace :serialize s)
     ;; bool _useClassifier
       (if _useClassifier (write-byte -1 s) (write-byte 0 s))
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; rail_agile_grasp_msgs/Workspace _workspace
     (send _workspace :deserialize buf ptr-) (incf ptr- (send _workspace :serialization-length))
   ;; bool _useClassifier
     (setq _useClassifier (not (= 0 (sys::peek buf ptr- :char)))) (incf ptr- 1)
   ;;
   self)
  )

(setf (get rail_agile_grasp_msgs::FindGraspsGoal :md5sum-) "eece55cf3d17dd72a80eb8916296d814")
(setf (get rail_agile_grasp_msgs::FindGraspsGoal :datatype-) "rail_agile_grasp_msgs/FindGraspsGoal")
(setf (get rail_agile_grasp_msgs::FindGraspsGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Define the goal
rail_agile_grasp_msgs/Workspace workspace   # workspace in which to search for grasps
bool useClassifier                          # flag for using the AGILE classifier

================================================================================
MSG: rail_agile_grasp_msgs/Workspace
uint8 WORKSPACE_VOLUME = 0
uint8 CENTERED_ROI = 1

uint8 mode                              # workspace definition mode, either WORKSPACE_VOLUME or CENTERED_ROI
float64 x_min                           # minimum x bound of rectangular workspace (for WORKSPACE_VOLUME only)
float64 x_max                           # maximum x bound of rectangular workspace (for WORKSPACE_VOLUME only)
float64 y_min                           # minimum y bound of rectangular workspace (for WORKSPACE_VOLUME only)
float64 y_max                           # maximum y bound of rectangular workspace (for WORKSPACE_VOLUME only)
float64 z_min                           # minimum z bound of rectangular workspace (for WORKSPACE_VOLUME only)
float64 z_max                           # maximum z bound of rectangular workspace (for WORKSPACE_VOLUME only)
geometry_msgs/PointStamped roiCenter    # workspace center point (for CENTERED_ROI only)
geometry_msgs/Vector3 roiDimensions     # workspace bounds (for CENTERED_ROI only)
================================================================================
MSG: geometry_msgs/PointStamped
# This represents a Point with reference coordinate frame and timestamp
Header header
Point point

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
")



(provide :rail_agile_grasp_msgs/FindGraspsGoal "eece55cf3d17dd72a80eb8916296d814")


