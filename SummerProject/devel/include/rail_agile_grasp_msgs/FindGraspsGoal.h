// Generated by gencpp from file rail_agile_grasp_msgs/FindGraspsGoal.msg
// DO NOT EDIT!


#ifndef RAIL_AGILE_GRASP_MSGS_MESSAGE_FINDGRASPSGOAL_H
#define RAIL_AGILE_GRASP_MSGS_MESSAGE_FINDGRASPSGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <rail_agile_grasp_msgs/Workspace.h>

namespace rail_agile_grasp_msgs
{
template <class ContainerAllocator>
struct FindGraspsGoal_
{
  typedef FindGraspsGoal_<ContainerAllocator> Type;

  FindGraspsGoal_()
    : workspace()
    , useClassifier(false)  {
    }
  FindGraspsGoal_(const ContainerAllocator& _alloc)
    : workspace(_alloc)
    , useClassifier(false)  {
  (void)_alloc;
    }



   typedef  ::rail_agile_grasp_msgs::Workspace_<ContainerAllocator>  _workspace_type;
  _workspace_type workspace;

   typedef uint8_t _useClassifier_type;
  _useClassifier_type useClassifier;




  typedef boost::shared_ptr< ::rail_agile_grasp_msgs::FindGraspsGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rail_agile_grasp_msgs::FindGraspsGoal_<ContainerAllocator> const> ConstPtr;

}; // struct FindGraspsGoal_

typedef ::rail_agile_grasp_msgs::FindGraspsGoal_<std::allocator<void> > FindGraspsGoal;

typedef boost::shared_ptr< ::rail_agile_grasp_msgs::FindGraspsGoal > FindGraspsGoalPtr;
typedef boost::shared_ptr< ::rail_agile_grasp_msgs::FindGraspsGoal const> FindGraspsGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rail_agile_grasp_msgs::FindGraspsGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rail_agile_grasp_msgs::FindGraspsGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace rail_agile_grasp_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'rail_agile_grasp_msgs': ['/home/orsteam/SummerProject/src/rail_agile_grasp/rail_agile_grasp_msgs/msg', '/home/orsteam/SummerProject/devel/share/rail_agile_grasp_msgs/msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'rail_manipulation_msgs': ['/home/orsteam/SummerProject/src/rail_manipulation_msgs/msg', '/home/orsteam/SummerProject/devel/share/rail_manipulation_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'visualization_msgs': ['/opt/ros/kinetic/share/visualization_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::rail_agile_grasp_msgs::FindGraspsGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rail_agile_grasp_msgs::FindGraspsGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rail_agile_grasp_msgs::FindGraspsGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rail_agile_grasp_msgs::FindGraspsGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rail_agile_grasp_msgs::FindGraspsGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rail_agile_grasp_msgs::FindGraspsGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rail_agile_grasp_msgs::FindGraspsGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "eece55cf3d17dd72a80eb8916296d814";
  }

  static const char* value(const ::rail_agile_grasp_msgs::FindGraspsGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xeece55cf3d17dd72ULL;
  static const uint64_t static_value2 = 0xa80eb8916296d814ULL;
};

template<class ContainerAllocator>
struct DataType< ::rail_agile_grasp_msgs::FindGraspsGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rail_agile_grasp_msgs/FindGraspsGoal";
  }

  static const char* value(const ::rail_agile_grasp_msgs::FindGraspsGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rail_agile_grasp_msgs::FindGraspsGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
# Define the goal\n\
rail_agile_grasp_msgs/Workspace workspace   # workspace in which to search for grasps\n\
bool useClassifier                          # flag for using the AGILE classifier\n\
\n\
================================================================================\n\
MSG: rail_agile_grasp_msgs/Workspace\n\
uint8 WORKSPACE_VOLUME = 0\n\
uint8 CENTERED_ROI = 1\n\
\n\
uint8 mode                              # workspace definition mode, either WORKSPACE_VOLUME or CENTERED_ROI\n\
float64 x_min                           # minimum x bound of rectangular workspace (for WORKSPACE_VOLUME only)\n\
float64 x_max                           # maximum x bound of rectangular workspace (for WORKSPACE_VOLUME only)\n\
float64 y_min                           # minimum y bound of rectangular workspace (for WORKSPACE_VOLUME only)\n\
float64 y_max                           # maximum y bound of rectangular workspace (for WORKSPACE_VOLUME only)\n\
float64 z_min                           # minimum z bound of rectangular workspace (for WORKSPACE_VOLUME only)\n\
float64 z_max                           # maximum z bound of rectangular workspace (for WORKSPACE_VOLUME only)\n\
geometry_msgs/PointStamped roiCenter    # workspace center point (for CENTERED_ROI only)\n\
geometry_msgs/Vector3 roiDimensions     # workspace bounds (for CENTERED_ROI only)\n\
================================================================================\n\
MSG: geometry_msgs/PointStamped\n\
# This represents a Point with reference coordinate frame and timestamp\n\
Header header\n\
Point point\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::rail_agile_grasp_msgs::FindGraspsGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rail_agile_grasp_msgs::FindGraspsGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.workspace);
      stream.next(m.useClassifier);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FindGraspsGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rail_agile_grasp_msgs::FindGraspsGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rail_agile_grasp_msgs::FindGraspsGoal_<ContainerAllocator>& v)
  {
    s << indent << "workspace: ";
    s << std::endl;
    Printer< ::rail_agile_grasp_msgs::Workspace_<ContainerAllocator> >::stream(s, indent + "  ", v.workspace);
    s << indent << "useClassifier: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.useClassifier);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RAIL_AGILE_GRASP_MSGS_MESSAGE_FINDGRASPSGOAL_H
