// Generated by gencpp from file remote_manipulation_markers/ModeSwitchRequest.msg
// DO NOT EDIT!


#ifndef REMOTE_MANIPULATION_MARKERS_MESSAGE_MODESWITCHREQUEST_H
#define REMOTE_MANIPULATION_MARKERS_MESSAGE_MODESWITCHREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace remote_manipulation_markers
{
template <class ContainerAllocator>
struct ModeSwitchRequest_
{
  typedef ModeSwitchRequest_<ContainerAllocator> Type;

  ModeSwitchRequest_()
    : mode(0)  {
    }
  ModeSwitchRequest_(const ContainerAllocator& _alloc)
    : mode(0)  {
  (void)_alloc;
    }



   typedef int8_t _mode_type;
  _mode_type mode;


    enum { VIEW = 0 };
     enum { REFINE_POINT = 1 };
     enum { REFINE_APPROACH_ANGLE = 2 };
     enum { REFINE_WRIST = 3 };
 

  typedef boost::shared_ptr< ::remote_manipulation_markers::ModeSwitchRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::remote_manipulation_markers::ModeSwitchRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ModeSwitchRequest_

typedef ::remote_manipulation_markers::ModeSwitchRequest_<std::allocator<void> > ModeSwitchRequest;

typedef boost::shared_ptr< ::remote_manipulation_markers::ModeSwitchRequest > ModeSwitchRequestPtr;
typedef boost::shared_ptr< ::remote_manipulation_markers::ModeSwitchRequest const> ModeSwitchRequestConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::remote_manipulation_markers::ModeSwitchRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::remote_manipulation_markers::ModeSwitchRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace remote_manipulation_markers

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'remote_manipulation_markers': ['/home/orsteam/SummerProject/devel/share/remote_manipulation_markers/msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::remote_manipulation_markers::ModeSwitchRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::remote_manipulation_markers::ModeSwitchRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::remote_manipulation_markers::ModeSwitchRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::remote_manipulation_markers::ModeSwitchRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::remote_manipulation_markers::ModeSwitchRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::remote_manipulation_markers::ModeSwitchRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::remote_manipulation_markers::ModeSwitchRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "eacce524304475ee5bf1ff469123795e";
  }

  static const char* value(const ::remote_manipulation_markers::ModeSwitchRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xeacce524304475eeULL;
  static const uint64_t static_value2 = 0x5bf1ff469123795eULL;
};

template<class ContainerAllocator>
struct DataType< ::remote_manipulation_markers::ModeSwitchRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "remote_manipulation_markers/ModeSwitchRequest";
  }

  static const char* value(const ::remote_manipulation_markers::ModeSwitchRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::remote_manipulation_markers::ModeSwitchRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 VIEW=0\n\
int8 REFINE_POINT=1\n\
int8 REFINE_APPROACH_ANGLE=2\n\
int8 REFINE_WRIST=3\n\
\n\
int8 mode\n\
";
  }

  static const char* value(const ::remote_manipulation_markers::ModeSwitchRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::remote_manipulation_markers::ModeSwitchRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ModeSwitchRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::remote_manipulation_markers::ModeSwitchRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::remote_manipulation_markers::ModeSwitchRequest_<ContainerAllocator>& v)
  {
    s << indent << "mode: ";
    Printer<int8_t>::stream(s, indent + "  ", v.mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // REMOTE_MANIPULATION_MARKERS_MESSAGE_MODESWITCHREQUEST_H
